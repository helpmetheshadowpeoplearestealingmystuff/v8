// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module array {
  macro GetLengthProperty(context: Context, o: Object): Number {
    if (BranchIfFastJSArray(o, context)) {
      let a: JSArray = unsafe_cast<JSArray>(o);
      return a.length_fast;
    } else
      deferred {
        return ToLength_Inline(context, GetProperty(context, o, 'length'));
      }
  }

  macro IsArray(o: Object): bool {
    try {
      let array: JSArray = cast<JSArray>(o) otherwise NotArray;
      return true;
    }
    label NotArray {
      return false;
      }
    }

  macro StoreArrayHole(elements: FixedDoubleArray, k: Smi): void {
    StoreFixedDoubleArrayHoleSmi(elements, k);
  }

  macro StoreArrayHole(elements: FixedArray, k: Smi): void {
    elements[k] = Hole;
  }

  macro CopyArrayElement(
      elements: FixedArray, newElements: FixedArray, from: Smi, to: Smi): void {
    let e: Object = elements[from];
    newElements[to] = e;
    }

  macro CopyArrayElement(
      elements: FixedDoubleArray, newElements: FixedDoubleArray, from: Smi,
      to: Smi): void {
    try {
      let floatValue: float64 = LoadDoubleWithHoleCheck(elements, from)
      otherwise FoundHole;
      newElements[to] = floatValue;
    }
    label FoundHole {
      StoreArrayHole(newElements, to);
    }
    }

  ///////////////////////////////////////////////////////////////////////////////////
  // Sparse array support
  // This is a port of the sparse array support in src/js/array.js.
  //
  extern runtime HasComplexElements(Context, JSArray): Boolean;
  extern runtime EstimateNumberOfElements(Context, JSArray): Number;
  extern runtime GetArrayKeys(Context, Object, Object): JSArray|Number;
  extern runtime MoveArrayContents(Context, JSArray, JSArray): void;

  macro UseSparseVariant(
      context: Context, o: JSReceiver, length: Number, touched: Number): bool {
    try {
      if (length < 1000) {
        return false;
      }
      let array: JSArray = cast<JSArray>(o) otherwise ReturnFalse;
      if (HasComplexElements(context, array) == True) {
        return false;
    }
      let smi_length: Smi = cast<Smi>(length) otherwise ReturnTrue;
      let elements_threshold: Smi = smi_length >>> 2;  // = length / 4.
      let estimated_elements_number: Number =
          EstimateNumberOfElements(context, array);
      let estimated_elements: Smi =
          cast<Smi>(estimated_elements_number) otherwise ReturnFalse;
      if (estimated_elements < elements_threshold) {
        if (touched > (estimated_elements >>> 2)) {
          return true;
    }
      }
      return false;
    }
    label ReturnFalse {
      return false;
    }
    label ReturnTrue {
      return true;
      }
    }

  macro SparseSlice(
      context: Context, o: JSReceiver, actualStart: Number,
      actualDeleteCount: Number, len: Number, a: JSReceiver): void {
    let indices: JSArray|Number =
        GetArrayKeys(context, o, actualStart + actualDeleteCount);
    if (IsNumber(indices)) {
      let limit: Number = unsafe_cast<Number>(indices);
      for (let i: Number = actualStart; i < limit; i++) {
        let fromPresent: Boolean = HasProperty(context, o, i);
        if (fromPresent == True) {
          let fromValue: Object = GetProperty(context, o, i);
          CreateDataProperty(context, a, i - actualStart, fromValue);
  }
      }
    } else {
      let indices_array: JSArray = unsafe_cast<JSArray>(indices);
      assert(IsFixedArray(indices_array.elements));
      let indices_elements: FixedArray =
          unsafe_cast<FixedArray>(indices_array.elements);
      let length: Smi = unsafe_cast<Smi>(indices_array.length);
      for (let k: Smi = 0; k < length; k++) {
        let key: Number = unsafe_cast<Number>(indices_elements[k]);
        if (key >= actualStart) {
          let fromPresent: Boolean = HasProperty(context, o, key);
          if (fromPresent == True) {
            let fromValue: Object = GetProperty(context, o, key);
            CreateDataProperty(context, a, key - actualStart, fromValue);
    }
        }
      }
    }
    }

  macro SparseMove(
      context: Context, o: JSArray, actualStart: Number,
      actualDeleteCount: Number, len: Number,
      additionalArgumentCount: Number): void {
    // Bail out if no moving is necessary.
    if (additionalArgumentCount == actualDeleteCount) {
      return;
    }
    // Move data to new array.
    let new_array: JSArray = InternalArrayCreate(
        context,
        // Clamp array length to 2^32-1 to avoid early RangeError.
        NumberMin(
            len - actualDeleteCount + additionalArgumentCount, 0xffffffff));

    let big_indices: Object = Undefined;
    let indices: JSArray|Number = GetArrayKeys(context, o, len);
    if (IsNumber(indices)) {
      let limit: Number = unsafe_cast<Number>(indices);
      for (let i: Number = 0; i < actualStart && i < limit; i++) {
        let fromPresent: Boolean = HasProperty(context, o, i);
      if (fromPresent == True) {
          let fromValue: Object = GetProperty(context, o, i);
          CreateDataProperty(context, new_array, i, fromValue);
      }
    }

      for (let i: Number = actualStart + actualDeleteCount; i < limit; i++) {
        let fromPresent: Boolean = HasProperty(context, o, i);
        if (fromPresent == True) {
          let fromValue: Object = GetProperty(context, o, i);
          let toIndex: Number = i - actualDeleteCount + additionalArgumentCount;
          CreateDataProperty(context, new_array, toIndex, fromValue);
        }
      }
    } else {
      assert(IsJSArray(unsafe_cast<HeapObject>(indices)));
      let indices_array: JSArray = unsafe_cast<JSArray>(indices);
      let indices_elements: FixedArray =
          unsafe_cast<FixedArray>(indices_array.elements);
      let length: Smi = unsafe_cast<Smi>(indices_array.length);
      for (let k: Smi = 0; k < length; ++k) {
        let key: Number = unsafe_cast<Number>(indices_elements[k]);
        if (key < actualStart) {
          let fromPresent: Boolean = HasProperty(context, o, key);
          if (fromPresent == True) {
            let fromValue: Object = GetProperty(context, o, key);
            CreateDataProperty(context, new_array, key, fromValue);
      }
        } else if (key >= (actualStart + actualDeleteCount)) {
          let fromPresent: Boolean = HasProperty(context, o, key);
        if (fromPresent == True) {
            let fromValue: Object = GetProperty(context, o, key);
            let new_key: Number =
                key - actualDeleteCount + additionalArgumentCount;
            CreateDataProperty(context, new_array, new_key, fromValue);
            if (new_key > 0xfffffffe) {
              if (big_indices == Undefined) {
                big_indices = InternalArrayCreate(context, 0);
        }
              let big_indices_array: JSArray =
                  unsafe_cast<JSArray>(big_indices);
              CreateDataProperty(
                  context, big_indices_array, big_indices_array.length,
                  new_key);
      }
    }
      }
    }
    }
    // Move contents of new_array into this array
    MoveArrayContents(context, new_array, o);
    // Add any moved values that aren't elements anymore.
    if (big_indices != Undefined) {
      let big_indices_array: JSArray = unsafe_cast<JSArray>(big_indices);
      let length: Smi = unsafe_cast<Smi>(big_indices_array.length);
      for (let i: Smi = 0; i < length; ++i) {
        let key: Object = GetProperty(context, big_indices_array, i);
        let value: Object = GetProperty(context, new_array, key);
        CreateDataProperty(context, o, key, value);
      }
    }
  }
}
