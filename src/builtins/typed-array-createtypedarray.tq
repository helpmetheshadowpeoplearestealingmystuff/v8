// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

namespace typed_array {
  extern builtin IterableToListMayPreserveHoles(Context, Object, Callable):
      JSArray;
  extern builtin TypedArrayInitialize(implicit context: Context)(
      JSTypedArray, PositiveSmi, PositiveSmi, Boolean, JSReceiver): void;
  extern builtin TypedArrayInitializeWithBuffer(implicit context: Context)(
      JSTypedArray, PositiveSmi, JSArrayBuffer, PositiveSmi, Number): void;

  extern macro TypedArrayBuiltinsAssembler::ByteLengthIsValid(Number): bool;
  extern macro TypedArrayBuiltinsAssembler::CallCMemcpy(
      RawPtr, RawPtr, uintptr): void;
  extern macro TypedArrayBuiltinsAssembler::IsSharedArrayBuffer(JSArrayBuffer):
      bool;

  extern runtime ThrowInvalidTypedArrayAlignment(implicit context: Context)(
      Map, String): never;
  extern runtime TypedArrayCopyElements(Context, JSTypedArray, Object, Number):
      void;

  // 22.2.4.2 TypedArray ( length )
  // ES #sec-typedarray-length
  macro ConstructByLength(implicit context: Context)(
      typedArray: JSTypedArray, length: Object, elementSize: Smi): void {
    const positiveElementSize: PositiveSmi =
        Cast<PositiveSmi>(elementSize) otherwise unreachable;
    const convertedLength: Number =
        ToInteger_Inline(context, length, kTruncateMinusZero);
    // The maximum length of a TypedArray is MaxSmi().
    // Note: this is not per spec, but rather a constraint of our current
    // representation (which uses Smis).
    // TODO(7881): support larger-than-smi typed array lengths
    const positiveLength: PositiveSmi = Cast<PositiveSmi>(convertedLength)
        otherwise ThrowRangeError(context, kInvalidTypedArrayLength, length);
    const defaultConstructor: JSFunction = GetArrayBufferFunction();
    const initialize: Boolean = True;
    TypedArrayInitialize(
        typedArray, positiveLength, positiveElementSize, initialize,
        defaultConstructor);
  }

  // 22.2.4.4 TypedArray ( object )
  // ES #sec-typedarray-object
  macro ConstructByArrayLike(implicit context: Context)(
      typedArray: JSTypedArray, arrayLike: HeapObject, initialLength: Object,
      elementSize: Smi, bufferConstructor: JSReceiver): void {
    const positiveElementSize: PositiveSmi =
        Cast<PositiveSmi>(elementSize) otherwise unreachable;
    // The caller has looked up length on arrayLike, which is observable.
    const length: PositiveSmi = ToSmiLength(initialLength)
        otherwise ThrowRangeError(context, kInvalidTypedArrayLength, initialLength);
    const initialize: Boolean = False;
    TypedArrayInitialize(
        typedArray, length, positiveElementSize, initialize, bufferConstructor);

    try {
      const src: JSTypedArray = Cast<JSTypedArray>(arrayLike) otherwise IfSlow;

      if (IsDetachedBuffer(src.buffer)) {
        ThrowTypeError(context, kDetachedOperation, 'Construct');

      } else if (src.elements_kind != typedArray.elements_kind) {
        goto IfSlow;

      } else if (length > 0) {
        const byteLength: Number = SmiMul(length, elementSize);
        assert(ByteLengthIsValid(byteLength));
        CallCMemcpy(
            typedArray.data_ptr, src.data_ptr, Convert<uintptr>(byteLength));
      }
    }
    label IfSlow deferred {
      if (length > 0) {
        TypedArrayCopyElements(context, typedArray, arrayLike, length);
      }
    }
  }

  // 22.2.4.4 TypedArray ( object )
  // ES #sec-typedarray-object
  macro ConstructByIterable(implicit context: Context)(
      typedArray: JSTypedArray, iterable: JSReceiver, iteratorFn: Callable,
      elementSize: Smi): void {
    const array: JSArray =
        IterableToListMayPreserveHoles(context, iterable, iteratorFn);
    ConstructByArrayLike(
        typedArray, array, array.length, elementSize, GetArrayBufferFunction());
  }

  // 22.2.4.3 TypedArray ( typedArray )
  // ES #sec-typedarray-typedarray
  macro ConstructByTypedArray(implicit context: Context)(
      typedArray: JSTypedArray, srcTypedArray: JSTypedArray,
      elementSize: Smi): void {
    let bufferConstructor: JSReceiver = GetArrayBufferFunction();
    const srcBuffer: JSArrayBuffer = srcTypedArray.buffer;
    // TODO(petermarshall): Throw on detached typedArray.
    let length: Smi = IsDetachedBuffer(srcBuffer) ? 0 : srcTypedArray.length;

    // The spec requires that constructing a typed array using a SAB-backed
    // typed array use the ArrayBuffer constructor, not the species constructor.
    // See https://tc39.github.io/ecma262/#sec-typedarray-typedarray.
    if (!IsSharedArrayBuffer(srcBuffer)) {
      bufferConstructor = SpeciesConstructor(srcBuffer, bufferConstructor);
      // TODO(petermarshall): Throw on detached typedArray.
      if (IsDetachedBuffer(srcBuffer)) length = 0;
    }
    ConstructByArrayLike(
        typedArray, srcTypedArray, length, elementSize, bufferConstructor);
  }

  // Determines if `bytes` (byte offset or length) cannot be evenly divded by
  // element size.
  macro IsUnaligned(implicit context: Context)(bytes: Number, elementSize: Smi):
      bool {
    const kZero: Smi = 0;
    if (bytes == kZero) return false;
    const remainder: Number =
        Cast<Number>(Modulus(bytes, elementSize)) otherwise unreachable;
    return remainder != kZero;
  }

  // 22.2.4.5 TypedArray ( buffer, byteOffset, length )
  // ES #sec-typedarray-buffer-byteoffset-length
  macro ConstructByArrayBuffer(implicit context: Context)(
      typedArray: JSTypedArray, buffer: JSArrayBuffer, byteOffset: Object,
      length: Object, elementSize: Smi): void {
    const positiveElementSize: PositiveSmi =
        Cast<PositiveSmi>(elementSize) otherwise unreachable;
    try {
      let offset: Number = FromConstexpr<Smi>(0);
      if (byteOffset != Undefined) {
        // 6. Let offset be ? ToIndex(byteOffset).
        offset = ToInteger_Inline(context, byteOffset, kTruncateMinusZero);
        if (offset < 0) goto IfInvalidOffset;

        // 7. If offset modulo elementSize ≠ 0, throw a RangeError exception.
        if (IsUnaligned(offset, positiveElementSize)) {
          goto IfInvalidAlignment('start offset');
        }
      }

      let newLength: PositiveSmi = 0;
      // 8. If length is present and length is not undefined, then
      if (length != Undefined) {
        // a. Let newLength be ? ToIndex(length).
        newLength = ToSmiIndex(length) otherwise IfInvalidLength;
      }

      // 9. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.
      if (IsDetachedBuffer(buffer)) {
        ThrowTypeError(context, kDetachedOperation, 'Construct');
      }

      // 10. Let bufferByteLength be buffer.[[ArrayBufferByteLength]].
      const bufferByteLength: Number = Convert<Number>(buffer.byte_length);

      // 11. If length is either not present or undefined, then
      if (length == Undefined) {
        // a. If bufferByteLength modulo elementSize ≠ 0, throw a RangeError
        // exception.
        if (IsUnaligned(bufferByteLength, positiveElementSize)) {
          goto IfInvalidAlignment('byte length');
        }

        // b. Let newByteLength be bufferByteLength - offset.
        // c. If newByteLength < 0, throw a RangeError exception.
        if (bufferByteLength < offset) goto IfInvalidOffset;

        // Spec step 16 length calculated here to avoid recalculating the length
        // in the step 12 branch.
        newLength = ToSmiIndex(
            Divide((Subtract(bufferByteLength, offset)), positiveElementSize))
            otherwise IfInvalidLength;

        // 12. Else,
      } else {
        // a. Let newByteLength be newLength × elementSize.
        const newByteLength: Number = SmiMul(newLength, positiveElementSize);

        // b. If offset + newByteLength > bufferByteLength, throw a RangeError
        // exception.
        const difference: Number =
            Cast<Number>(Subtract(bufferByteLength, newByteLength))
            otherwise unreachable;
        if (difference < offset) goto IfInvalidLength;
      }

      TypedArrayInitializeWithBuffer(
          typedArray, newLength, buffer, positiveElementSize, offset);
    }
    label IfInvalidAlignment(problemString: String) deferred {
      ThrowInvalidTypedArrayAlignment(typedArray.map, problemString);
    }
    label IfInvalidLength deferred {
      ThrowRangeError(context, kInvalidTypedArrayLength, length);
    }
    label IfInvalidOffset deferred {
      ThrowRangeError(context, kInvalidOffset, byteOffset);
    }
  }
}
