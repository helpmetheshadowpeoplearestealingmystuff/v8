# Copyright 2015 the V8 project authors. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of Google Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import("//build/config/v8_target_cpu.gni")

declare_args() {
  # The snapshot needs to be compiled for the host, but compiled with
  # a toolchain that matches the bit-width of the target.
  v8_snapshot_toolchain = ""
}

# TODO(GYP): For now we only support 32-bit little-endian target builds from an
# x64 Linux host. Eventually we need to support all of the host/target
# configurations v8 runs on.
if (v8_snapshot_toolchain == "") {
  if (host_cpu == "x64" && host_os == "linux") {
    if (v8_current_cpu == v8_target_cpu && current_cpu == target_cpu &&
        (target_cpu == "x86" || target_cpu == "x64")) {
      # Args that are specified by the user can end up having the same
      # effect as args that are specified in a toolchain; for example,
      # building on linux x64 with target_cpu == "x86" v8_target_cpu == "arm"
      # will use the //build/toolchain/linux:clang_x86 toolchain, but have the
      # same effect as if you specified
      #
      #   custom_toolchain="//build/toolchain/linux:clang_x86_v8_arm"
      #
      # As a result, if we didn't take that into account we could
      # accidentally end up building two identical copies of v8.
      #
      # So, we can re-use the default toolchain for the snapshot in these
      # casees, but only when the host is actually capable of running the
      # target code, which at this time means that the target_cpu == x86
      # or x64.
      v8_snapshot_toolchain = default_toolchain
    } else {
      if (current_cpu == "arm" || current_cpu == "mipsel" ||
          current_cpu == "x86") {
        _snapshot_cpu = "x86"
      } else {
        assert(current_cpu == "arm64" || current_cpu == "x64" ||
                   current_cpu == "mips64el",
               "Need environment for this arch: $current_cpu")
        _snapshot_cpu = "x64"
      }

      if (v8_current_cpu != _snapshot_cpu) {
        _cpus = "${_snapshot_cpu}_v8_${v8_current_cpu}"
      } else {
        _cpus = _snapshot_cpu
      }

      if ((host_os == "linux" && current_os == "android") || is_clang) {
        v8_snapshot_toolchain = "//build/toolchain/linux:clang_${_cpus}"
      } else {
        v8_snapshot_toolchain = "//build/toolchain/linux:${_cpus}"
      }
    }
  } else if (host_os == "mac" && current_os == "win") {
    assert(v8_current_cpu == current_cpu,
           "v8 target must match the regular target on this platform")
    v8_snapshot_toolchain = "//build/toolchain/mac:clang_$current_cpu"
  } else {
    v8_snapshot_toolchain = default_toolchain
  }
}
